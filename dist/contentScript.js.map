{"version":3,"file":"contentScript.js","mappings":";;;;;AAAA;AACA;AACA,gBAAgB;AAChB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qCAAqC;AAC1E,sCAAsC,mCAAmC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,2CAA2C;AAC3C,qDAAqD;AACrD,2CAA2C;AAC3C,wCAAwC;AACxC,sEAAsE;AACtE,sDAAsD;AACtD,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,yDAAyD;AACzD,iDAAiD;AACjD,+CAA+C;AAC/C,gEAAgE;AAChE,iDAAiD;AACjD,wDAAwD;AACxD,+CAA+C;AAC/C,qDAAqD;AACrD;AACA;AACA,gDAAgD;AAChD,0DAA0D;AAC1D,0DAA0D;AAC1D,iDAAiD;AACjD,mDAAmD;AACnD,mDAAmD;AACnD,oDAAoD;AACpD,4DAA4D;AAC5D,oDAAoD;AACpD,kDAAkD;AAClD,kDAAkD;AAClD,+DAA+D;AAC/D,yDAAyD;AACzD,uDAAuD;AACvD,qDAAqD;AACrD,0DAA0D;AAC1D,8DAA8D;AAC9D,qEAAqE;AACrE,sDAAsD;AACtD;AACA;AACA,sCAAsC;AACtC;AACA,+CAA+C,OAAO;AACtD;AACA,iDAAiD,sCAAsC;AACvF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB,GAAG;AACjD;AACA;AACA;AACA,uBAAuB,sBAAsB,GAAG;AAChD;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,wBAAwB,GAAG;AAClD;AACA;AACA;AACA,uBAAuB,yBAAyB,GAAG;AACnD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://chrome-extension/./src/contentScript/contentScript.ts"],"sourcesContent":["// contentScript.ts\nconsole.log(\"Content script injected and running.\");\nlet notes = []; // Array to store notes\nlet note = \"\"; // Variable to store note text\nconst highlightText = (color) => {\n    console.log('Highlight button clicked in content script');\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n        const range = selection.getRangeAt(0);\n        const newNode = document.createElement(\"span\");\n        newNode.style.backgroundColor = color;\n        range.surroundContents(newNode);\n    }\n};\nconst addNote = (color) => {\n    const selection = window.getSelection();\n    if (selection && !selection.isCollapsed) {\n        const range = selection.getRangeAt(0);\n        const selectedText = range.toString();\n        // Remove existing note containers\n        const existingContainers = document.querySelectorAll('.note-container');\n        existingContainers.forEach(container => container.remove());\n        // Create a container for the note input and submit button\n        const noteContainer = document.createElement(\"div\");\n        noteContainer.className = \"note-container\";\n        noteContainer.style.position = \"absolute\";\n        noteContainer.style.top = `${range.getBoundingClientRect().bottom}px`;\n        noteContainer.style.left = `${range.getBoundingClientRect().left}px`;\n        // Create an input element for entering the note\n        const noteInput = document.createElement(\"input\");\n        noteInput.type = \"text\";\n        noteInput.placeholder = \"Enter your note here...\";\n        noteInput.style.marginRight = \"5px\";\n        noteInput.style.borderBottom = '1px solid #3182ce';\n        noteInput.style.borderRadius = '7px';\n        noteInput.style.borderRadius = '15px';\n        noteInput.style.padding = '10px';\n        // Create a submit button\n        const submitButton = document.createElement(\"button\");\n        submitButton.textContent = \"Submit\";\n        const buttonBorderStyle = \"1px solid #3182ce\"; // Blue border\n        const buttonBorderRadius = \"10px\"; // Rounded corners\n        const buttonBackgroundColor = \"transparent\"; // Transparent background\n        const buttonTextColor = \"#3182ce\"; // Blue text color\n        const buttonCursor = \"pointer\"; // Pointer cursor\n        const buttonTransition = \"background-color 0.3s, color 0.3s\"; // Smooth transition\n        const buttonHoverBackgroundColor = \"#3182ce\"; // Blue background on hover\n        const buttonHoverTextColor = \"white\"; // White text color on hover\n        submitButton.style.border = buttonBorderStyle;\n        submitButton.style.borderRadius = buttonBorderRadius;\n        submitButton.style.backgroundColor = buttonBackgroundColor;\n        submitButton.style.color = buttonTextColor;\n        submitButton.style.cursor = buttonCursor;\n        submitButton.style.transition = buttonTransition;\n        submitButton.style.fontSize = '15px';\n        submitButton.style.padding = '10px';\n        // Add event listener for button hover effect\n        submitButton.addEventListener('mouseenter', () => {\n            submitButton.style.backgroundColor = buttonHoverBackgroundColor;\n            submitButton.style.color = buttonHoverTextColor;\n        });\n        submitButton.addEventListener('mouseleave', () => {\n            submitButton.style.backgroundColor = buttonBackgroundColor;\n            submitButton.style.color = buttonTextColor;\n        });\n        // Add click event listener to the submit button\n        submitButton.addEventListener(\"click\", () => {\n            const noteText = noteInput.value.trim();\n            if (noteText) {\n                // Create a new note object\n                const newNote = {\n                    text: selectedText,\n                    note: noteText\n                };\n                // Add the note to the notes array\n                notes.push(newNote);\n                // Save notes to local storage\n                chrome.storage.local.set({ notes });\n                // Create a new div element to display the note\n                const noteDiv = document.createElement(\"div\");\n                noteDiv.textContent = noteText;\n                noteDiv.style.marginTop = \"5px\";\n                noteDiv.style.backgroundColor = \"black\"; // Light cream background color\n                noteDiv.style.color = \"#FFFDD0\"; // Shade of blue for text color\n                noteDiv.style.padding = \"2px\"; // Padding\n                noteDiv.style.fontFamily = \"Arial, sans-serif\"; // Font family\n                noteDiv.style.fontSize = \"12px\"; // Font size\n                noteDiv.style.display = \"inline-block\"; // Adjust width according to text length\n                noteDiv.style.opacity = \"0.8\"; // Opacity\n                noteDiv.style.position = \"relative\"; // Relative positioning for the delete button\n                // Create a delete button for the note\n                const deleteButton = document.createElement(\"button\");\n                deleteButton.textContent = \"X\"; // Button text\n                deleteButton.className = \"delete-button\"; // Add a class for styling\n                deleteButton.style.position = \"absolute\"; // Positioning\n                deleteButton.style.top = \"-8px\"; // Adjust position to top\n                deleteButton.style.right = \"-8px\"; // Adjust position to right\n                deleteButton.style.width = \"15px\"; // Width of the button\n                deleteButton.style.height = \"15px\"; // Height of the button\n                deleteButton.style.backgroundColor = \"red\"; // Background color\n                deleteButton.style.color = \"white\"; // Text color\n                deleteButton.style.opacity = \"1\"; // Opacity\n                deleteButton.style.padding = \"0\"; // Padding\n                deleteButton.style.border = \"1px solid black\"; // Border\n                deleteButton.style.borderRadius = \"30%\"; // No rounded corners\n                deleteButton.style.cursor = \"pointer\"; // Change cursor to pointer on hover\n                deleteButton.style.display = \"flex\"; // Use flex to center the text\n                deleteButton.style.alignItems = \"center\"; // Center vertically\n                deleteButton.style.justifyContent = \"center\"; // Center horizontally\n                deleteButton.style.fontFamily = \"Arial, sans-serif\"; // Set font-family explicitly\n                deleteButton.style.fontSize = \"10px\"; // Font size of the button\n                // Add click event listener to the delete button\n                deleteButton.addEventListener(\"click\", () => {\n                    noteDiv.remove(); // Remove the note when delete button is clicked\n                    notes = notes.filter(note => note.note !== noteText);\n                    chrome.storage.local.set({ notes });\n                    // Send message to popup to delete the note\n                    chrome.runtime.sendMessage({ action: 'deleteNote', note: noteText });\n                });\n                // Append the delete button to the note div\n                noteDiv.appendChild(deleteButton);\n                // Insert the note div below the selected text\n                const rangeRect = range.getBoundingClientRect();\n                noteDiv.style.position = \"absolute\";\n                noteDiv.style.top = `${rangeRect.bottom}px`;\n                noteDiv.style.left = `${rangeRect.left}px`;\n                document.body.appendChild(noteDiv);\n                // Remove the note input container\n                noteContainer.remove();\n            }\n        });\n        // Append the input and submit button to the note container\n        noteContainer.appendChild(noteInput);\n        noteContainer.appendChild(submitButton);\n        // Append the note container to the document body\n        document.body.appendChild(noteContainer);\n    }\n};\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Message received in content script', message);\n    if (message.action === \"highlightText\") {\n        highlightText(message.color);\n        sendResponse({ status: \"highlighted\" }); // Synchronous response\n    }\n    else if (message.action === \"addNote\") {\n        addNote(message.color);\n        sendResponse({ status: \"note added\" }); // Synchronous response\n    }\n    else if (message.action === \"deleteNote\") {\n        // Handle note deletion\n        notes = notes.filter(note => note.note !== message.note);\n        chrome.storage.local.set({ notes });\n        // Remove the note from the document\n        const noteDivs = document.querySelectorAll('div');\n        noteDivs.forEach((noteDiv) => {\n            if (noteDiv.textContent.includes(message.note)) {\n                noteDiv.remove();\n            }\n        });\n        sendResponse({ status: \"note deleted\" }); // Synchronous response\n    }\n    else if (message.action === \"exportPage\") {\n        window.print();\n        sendResponse({ status: \"page exported\" }); // Synchronous response\n    }\n});\ndocument.addEventListener(\"keydown\", (event) => {\n    if (event.key === \"q\" && event.ctrlKey) {\n        highlightText(\"#ffff00\");\n    }\n});\ndocument.addEventListener(\"keydown\", (event) => {\n    if (event.key === \"b\" && event.ctrlKey) {\n        addNote(\"#ffff00\");\n    }\n});\n"],"names":[],"sourceRoot":""}